{
    "Public function": {
        "prefix": "met",
        "body": [
            "public function $1($2)",
            "{",
            "\t$3",
            "}"
        ],
        "description": "New public function"
    },
    "Protected function": {
        "prefix": "pmet",
        "body": [
            "protected function $1($2)",
            "{",
            "\t$3",
            "}"
        ],
        "description": "New protected function"
    },
    "Public static function": {
        "prefix": "static",
        "body": [
            "public static function $1()",
            "{",
            "\t$2",
            "}"
        ],
        "description": "New public static function"
    },
    "Slug Options": {
        "prefix": "sluggable",
        "body": [
            "public function getSlugOptions(): SlugOptions",
            "{",
            "\treturn SlugOptions::create()",
            "\t\t->generateSlugsFrom('name')",
            "\t\t->saveSlugsTo('slug');",
            "}"
        ],
        "description": "New form public function"
    },
    "Public function form": {
        "prefix": "form",
        "body": [
            "public function form(Form $$form): Form$1",
            "{",
            "\treturn $$form",
            "\t\t->schema([",
            "\t\t\t$2",
            "\t\t]);",
            "}"
        ],
        "description": "New form public function"
    },
    "Public function table": {
        "prefix": "table",
        "body": [
            "public function table(Table $$table): Table$1",
            "{",
            "\treturn $$table",
            "\t\t->query($2)",
            "\t\t->columns([",
            "\t\t\t$3",
            "\t\t])",
            "\t\t->filters([",
            "\t\t\t// ...",
            "\t\t])",
            "\t\t->actions([",
            "\t\t\t// ...",
            "\t\t])",
            "\t\t->bulkActions([",
            "\t\t\t// ...",
            "\t\t]);",
            "\t}"
        ],
        "description": "New table public function"
    },
    "Slug": {
        "prefix": "slug",
        "body": [
            "protected static ?string $$slug = '$1';",
        ],
        "description": "New slug"
    },
    "Group": {
        "prefix": "group",
        "body": [
            "protected static ?string $$navigationGroup = '$1';",
        ],
        "description": "New navigation group"
    },
    "icon": {
        "prefix": "icon",
        "body": [
            "protected static ?string $$navigationIcon = '$1';",
        ],
        "description": "New navigation icon"
    },
    "label": {
        "prefix": "label",
        "body": [
            "protected static ?string $$navigationLabel = '$1';",
        ],
        "description": "New navigation label"
    },
    "Sort": {
        "prefix": "sort",
        "body": [
            "protected static ?int $$navigationSort = $1;",
        ],
        "description": "New navigation sort"
    },
    "Search": {
        "prefix": "search",
        "body": [
            "protected static ?string $$recordTitleAttribute = '$1name';",
        ],
        "description": "Global search"
    },
    "Search Result URLs": {
        "prefix": "result",
        "body": [
            "public static function getGlobalSearchResultUrl(Model$1 $$record): string",
            "{",
            "\treturn ${TM_FILENAME_BASE}::getUrl('view', ['record' => $$record]);",
            "}",
        ],
        "description": "Global search result URLs"
    },
    "Title": {
        "prefix": "title",
        "body": [
            "protected static ?string $$title = $1;",
        ],
        "description": "New navigation title"
    },
    "model": {
        "prefix": "model",
        "body": [
            "protected static ?string $$modelLabel = '$1';",
        ],
        "description": "New navigation model"
    },
    "cluster": {
        "prefix": "cluster",
        "body": [
            "protected static ?string $$cluster = $1::class;",
        ],
        "description": "New navigation cluster"
    },
    "infolist": {
        "prefix": "infolists",
        "body": [
            "public static function infolist(Infolist $$infolist): Infolist$1",
            "{",
            "\treturn $$infolist",
            "\t\t->schema([",
            "\t\t\t$2",
            "\t\t]);",
            "}"
        ],
        "description": "New form public function"
    },
    "Casts": {
        "prefix": "casts",
        "body": [
            "protected function casts(): array",
            "{",
            "\treturn [",
            "\t\t$1",
            "\t];",
            "}"
        ],
        "description": "New public static function"
    },
    "ForeignIdFor": {
        "prefix": "fid",
        "body": [
            "$$table->foreignIdFor($1::class)->constrained()->cascadeOnDelete();",
        ],
        "description": "New foreign id for"
    },
    "ForeignId": {
        "prefix": "fi",
        "body": [
            "$$table->foreignId('$1')->references('id')->on('$2')->cascadeOnDelete();",
        ],
        "description": "New foreign id for"
    },
    "Table String": {
        "prefix": "tstring",
        "body": [
            "$$table->string('$1');",
        ],
        "description": "New table string"
    },
    "Table Boolean": {
        "prefix": "boolean",
        "body": [
            "$$table->boolean('$1')->default(true);",
        ],
        "description": "New table boolean"
    },
    "Table Decimal": {
        "prefix": "decimal",
        "body": [
            "$$table->decimal('$1');",
        ],
        "description": "New table decimal"
    },
    "Table Timestamp": {
        "prefix": "timestamp",
        "body": [
            "$$table->timestamp('$1');",
        ],
        "description": "New table timestamp"
    },
    "Table Enum": {
        "prefix": "enum",
        "body": [
            "$$table->enum('$1', $2::values())->default($2::DEFAULT);",
        ],
        "description": "New table enum"
    },
    "SoftDeletes": {
        "prefix": "softdeletes",
        "body": [
            "$$table->softDeletes();",
        ],
        "description": "New soft deletes"
    },
    "TableInt": {
        "prefix": "tint",
        "body": [
            "$$table->integer('$1');",
        ],
        "description": "New table integer"
    },
    "Table longtext": {
        "prefix": "text",
        "body": [
            "$$table->longText('$1');",
        ],
        "description": "New table long text"
    },
    "TableString": {
        "prefix": "tstring",
        "body": [
            "$$table->string('$1');",
        ],
        "description": "New soft deletes"
    },
    "DropSoftDeletes": {
        "prefix": "dropsoftdeletes",
        "body": [
            "$$table->dropSoftDeletes();",
        ],
        "description": "drop soft deletes"
    },
    "Searchable Columns": {
        "prefix": "searchable",
        "body": [
            "public static function getGloballySearchableAttributes(): array",
            "{",
            "\treturn ['name', 'slug'];",
            "}",
        ],
        "description": "Search across multiple columns"
    },
    "Search Results URLs": {
        "prefix": "searchUrl",
        "body": [
            "public static function getGlobalSearchResultUrl(Model $$record): string",
            "{",
            "\treturn $1::getUrl('view', ['record' => $$record]);",
            "}"
        ],
        "description": "Search results url"
    },
    "Eloquent Query": {
        "prefix": "eloquentQuery",
        "body": [
            "public static function getEloquentQuery(): Builder",
            "{",
            "\treturn parent::getEloquentQuery()",
            "\t\t->withoutGlobalScopes([",
            "\t\t\tSoftDeletingScope::class,",
            "\t\t]);",
            "}",
        ],
        "description": "get eloquent query"
    },
    "DropColumn": {
        "prefix": "dropColumn",
        "body": [
            "$$table->dropColumn($1);",
        ],
        "description": "drop table column"
    },
    "BelongsTo": {
        "prefix": "belongsto",
        "body": [
            "public function $1(): BelongsTo$3",
            "{",
            "\treturn $$this->belongsTo($2::class$4);",
            "}"
        ],
        "description": "New belongs to"
    },
    "BelongsToMany": {
        "prefix": "belongstomany",
        "body": [
            "public function $1(): BelongsToMany$3",
            "{",
            "\treturn $$this->belongsToMany($2::class$4);",
            "}"
        ],
        "description": "New belongs to many"
    },
    "HasMany": {
        "prefix": "hasmany",
        "body": [
            "public function $1(): HasMany$3",
            "{",
            "\treturn $$this->hasMany($2::class$4);",
            "}"
        ],
        "description": "New has many"
    },
    "HasManythrough": {
        "prefix": "hasmanythrough",
        "body": [
            "public function $1(): HasManyThrough$4",
            "{",
            "\treturn $$this->hasManyThrough($2::class, $3::class);",
            "}"
        ],
        "description": "New has many through relationship"
    },
    "HasOne": {
        "prefix": "hasone",
        "body": [
            "public function $1(): HasOne$3",
            "{",
            "\treturn $$this->hasOne($2::class$4);",
            "}"
        ],
        "description": "New has one rel"
    },
    "MorphTo": {
        "prefix": "morphto",
        "body": [
            "public function $1modelable(): MorphTo$2",
            "{",
            "\treturn $$this->morphTo();",
            "}"
        ],
        "description": "New morph one rel"
    },
    "Morphs": {
        "prefix": "morphs",
        "body": [
            "$$table->morphs('$1modelable');"
        ],
        "description": "morphs table columns"
    },
    "MorphOne": {
        "prefix": "morphone",
        "body": [
            "public function $1(): MorphOne$3",
            "{",
            "\treturn $$this->morphOne($2::class, '$4modelable');",
            "}"
        ],
        "description": "New morph one rel"
    },
    "MorphMany": {
        "prefix": "morphmany",
        "body": [
            "public function $1(): MorphMany$3",
            "{",
            "\treturn $$this->morphMany($2::class, '$4modelable');",
            "}"
        ],
        "description": "New morph many rel"
    },
    "GetColor": {
        "prefix": "getColor",
        "body": [
            "public function getColor(): string | array | null",
            "{",
            "\treturn match($$this) {",
            "\t\tself::$1 => $2,",
            "\t};",
            "}"
        ]
    },
    "GetIcon": {
        "prefix": "getIcon",
        "body": [
            "public function getIcon(): ?string",
            "{",
            "\treturn match($$this) {",
            "\t\tself::$1 => $2,",
            "\t};",
            "}"
        ]
    },
    "GetLabel": {
        "prefix": "getLabel",
        "body": [
            "public function getLabel(): ?string",
            "{",
            "\treturn match($$this) {",
            "\t\tself::$1 => $2,",
            "\t};",
            "}"
        ]
    },
    "Values": {
        "prefix": "values",
        "body": [
            "public static function values(): array",
            "{",
            "\treturn array_column(self::cases(), 'value');",
            "}"
        ]
    },
    "getForm": {
        "prefix": "getForm",
        "body": [
            "public static function getForm(): array",
            "{",
            "\treturn [",
            "\t\t$1",
            "\t];",
            "}"
        ]
    },
    "blameable": {
        "prefix": "blameable",
        "body": [
            "$$table->foreignId('created_by')->references('id')->on('users')->cascadeOnDelete();",
            "$$table->foreignId('deleted_by')->nullable()->references('id')->on('users')->cascadeOnDelete();",
            "$$table->foreignId('updated_by')->nullable()->references('id')->on('users')->cascadeOnDelete();",
        ],
        "description": "Get blameable traits for migrations"
    },
    "Modelable": {
        "prefix": "modelable",
        "body": [
            "public function modelable(): MorphTo",
            "{",
            "\treturn $$this->morphTo();",
            "}",
        ],
        "description": "Get morph to model relationship"
    },
    "Handle record creation": {
        "prefix": "handleRecordCreation",
        "body": [
            "protected function handleRecordCreation(array $$data): Model$1",
            "{",
            "\treturn static::getModel()::create($2);",
            "}",
        ],
        "description": "Customizing record creation process"
    }
}
